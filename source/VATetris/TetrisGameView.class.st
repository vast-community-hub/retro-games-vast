Class {
	#name : 'TetrisGameView',
	#superclass : 'AbtAppBldrView',
	#instVars : [
		'world',
		'isRunning'
	],
	#pools : [
		'CldtConstants'
	],
	#category : 'VATetris'
}

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisGameView class >> _PRAGMA_IS_ [

	"%%PRAGMA DECLARE
	(name: IS_TetrisGameView isPool: true isConstant: false)
	(pool: IS_TetrisGameView declarations: (
		(name: IS_instanceInterfaceSpec isConstant: false)
	))"
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisGameView class >> abtPrimFlushInterfaceSpecCache [

	IS_TetrisGameView associationsDo: [: poolDictionaryAssoc | poolDictionaryAssoc value: nil].
	super abtPrimFlushInterfaceSpecCache
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisGameView class >> abtUntranslatedConstants [
	"** Do not modify or delete **  See: AbtAppBldrPart class>>#about_abtUntranslatedConstants"

	^#('VA Tetris' 'Start' 'Pause' 'Level:' '1' 'Score:' '0')
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisGameView class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_TetrisGameView::IS_instanceInterfaceSpec notNil
		ifTrue: [IS_TetrisGameView::IS_instanceInterfaceSpec]
		ifFalse: [
		IS_TetrisGameView::IS_instanceInterfaceSpec := AbtInterfaceSpec new]
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisGameView >> abtBuildInternals [
	"** Do not modify or delete **  See: AbtAppBldrPart class>>#about_abtBuildInternals"

	| gui window gameGrid startButton pauseButton levelLabel levelField scoreLabel scoreField
	  preview1Pane preview2Pane preview3Pane world_1 conn0 conn1 conn2 conn5 conn8 conn15 conn6 conn7
	  conn18 |

	gui := self class abtSeparatedConstants.
	window := AbtShellView abtCreatePart: 'Window' parent: nil owner: self.
	gameGrid := TetrisDrawablePart abtCreatePart: 'gameGrid' parent: window.
	startButton := AbtPushButtonView abtCreatePart: 'startButton' parent: window.
	pauseButton := AbtPushButtonView abtCreatePart: 'pauseButton' parent: window.
	levelLabel := AbtLabelView abtCreatePart: 'levelLabel' parent: window.
	levelField := AbtLabelView abtCreatePart: 'levelField' parent: window.
	scoreLabel := AbtLabelView abtCreatePart: 'scoreLabel' parent: window.
	scoreField := AbtLabelView abtCreatePart: 'scoreField' parent: window.
	preview1Pane := TetrisDrawablePart abtCreatePart: 'preview1Pane' parent: window.
	preview2Pane := TetrisDrawablePart abtCreatePart: 'preview2Pane' parent: window.
	preview3Pane := TetrisDrawablePart abtCreatePart: 'preview3Pane' parent: window.
	(world_1 := AbtVariable abtCreatePart: 'world' parent: self parentVisual owner: self)
		partClass: TetrisWorld.
	self primaryPart: window.
	window
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (AbtEdgeConstant new offset: 50);
				rightEdge: (AbtEdgeConstant new offset: 412);
				topEdge: (AbtEdgeConstant new offset: 30);
				bottomEdge: (AbtEdgeConstant new offset: 692));
		title: (gui at: 1) " 'VA Tetris' ".
	gameGrid
		columnCount: 10;
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 340);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 20;
						attachedTargetView: levelLabel);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 582));
		shouldShowGrid: true;
		backgroundColor: 'white';
		rowCount: 20.
	startButton
		object: (gui at: 2) " 'Start' ";
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 5)).
	pauseButton
		object: (gui at: 3) " 'Pause' ";
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 10;
						attachedTargetView: startButton);
				rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 5)).
	levelLabel
		object: (gui at: 4) " 'Level:' ";
		fontName: '-microsoft-arial-bold-r-*-sans serif-*-140-*-*-*-*-iso8859-1';
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		foregroundColor: 'navy'.
	levelField
		object: (gui at: 5) " '1' ";
		fontName: '-microsoft-arial-bold-r-*-sans serif-*-140-*-*-*-*-iso8859-1';
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 5;
						attachedTargetView: levelLabel);
				rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHOPPOSITEWIDGET;
						offset: 0;
						attachedTargetView: levelLabel);
				bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		foregroundColor: 'navy'.
	scoreLabel
		object: (gui at: 6) " 'Score:' ";
		fontName: '-microsoft-arial-bold-r-*-sans serif-*-140-*-*-*-*-iso8859-1';
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 5;
						attachedTargetView: scoreField);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		foregroundColor: 'navy';
		recomputeSize: true.
	scoreField
		object: (gui at: 7) " '0' ";
		recomputeSize: true;
		alignment: 2;
		fontName: '-microsoft-arial-bold-r-*-sans serif-*-140-*-*-*-*-iso8859-1';
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 100);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHFORM;
						offset: 10);
				bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		foregroundColor: 'navy'.
	preview1Pane
		columnCount: 3;
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 10;
						attachedTargetView: gameGrid);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHOPPOSITEWIDGET;
						offset: 0;
						attachedTargetView: gameGrid);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44));
		shouldShowGrid: false;
		backgroundColor: 'white';
		rowCount: 4.
	preview2Pane
		columnCount: 3;
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHOPPOSITEWIDGET;
						offset: 0;
						attachedTargetView: preview1Pane);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 5;
						attachedTargetView: preview1Pane);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44));
		shouldShowGrid: false;
		backgroundColor: 'white';
		rowCount: 4.
	preview3Pane
		columnCount: 3;
		framingSpec: (
			AbtViewAttachmentConstraint new
				leftEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHOPPOSITEWIDGET;
						offset: 0;
						attachedTargetView: preview1Pane);
				rightEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44);
				topEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHWIDGET;
						offset: 5;
						attachedTargetView: preview2Pane);
				bottomEdge: (
					AbtRunEdgeAttachmentConstraint new
						attachment: XmATTACHSELFOPPOSITE;
						offset: 44));
		shouldShowGrid: false;
		backgroundColor: 'white';
		rowCount: 4.
	window
		abtWhenPrimitive: #aboutToOpenWidget
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #prepareView;
				arguments: #()).
	window
		abtWhenPrimitive: #openedWidget
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #setupView;
				arguments: #()).
	startButton
		abtWhenPrimitive: #clicked
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #startGame;
				arguments: #()).
	pauseButton
		abtWhenPrimitive: #clicked
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #pauseGame;
				arguments: #()).
	window
		abtWhenPrimitive: #aboutToCloseWidget
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #concludeView;
				arguments: #()).
	self attributeConnections add: (
		conn15 :=
			AbtAttributeToAttributeConnection new
				connectSource: world_1
				variableFeatureName: #score
				featureSelector: #IS_score
				toTarget: scoreField
				featureName: #object
				feature: AbtLabelView IS_object).
	self attributeConnections add: (
		conn6 :=
			AbtAttributeToAttributeConnection new
				connectSource: world_1
				variableFeatureName: #level
				featureSelector: #IS_level
				toTarget: levelField
				featureName: #object
				feature: AbtLabelView IS_object).
	world_1
		abtWhen: #newBlockAdded
		selector: #IS_newBlockAdded
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #processNewBlockAdded;
				arguments: #()).
	world_1
		abtWhen: #gameEnded
		selector: #IS_gameEnded
		perform: (
			DirectedMessage new
				receiver: self;
				selector: #showGameEnded;
				arguments: #()).
	self initializeAttributeConnections.
	self finalInitialize
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> ccwRotateBlock [

	^world ifNotNil: [ :w | w ccwRotateFallingBlock ]
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> concludeView [

	self pauseGame.

	^self
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> cwRotateBlock [

	^world ifNotNil: [ :w | w cwRotateFallingBlock ]
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> dropBlock [

	^world ifNotNil: [ :w | w dropFallingBlock ]
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisGameView >> initialize [

	isRunning := false.

	^super initialize
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> keyPressed: aWidget clientData: clientData callData: callData [

	( callData keysym = XKReturn ) ifTrue: [ ^self startGame ].
	( callData keysym = XKCancel ) ifTrue: [ ^self pauseGame ].

	( isRunning = true ) ifTrue: [
		( callData keysym = XKLeft ) ifTrue: [ ^self shiftBlockLeft ].
		( callData keysym = XKRight ) ifTrue: [ ^self shiftBlockRight ].
		( callData keysym = XKUp  ) ifTrue: [ ^self ccwRotateBlock ].
		( callData keysym = XKDown ) ifTrue: [ ^self cwRotateBlock ].
		( callData keysym = XKspace ) ifTrue: [ ^self dropBlock ].
	].

	^callData
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> pauseGame [

	isRunning := false.

	world ifNotNil: [ :w | w pauseGame ].

	(self subpartNamed: 'gameGrid') setFocus.

	^world
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> prepareView [

]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> processNewBlockAdded [
	"Perform any appropriate duties, now that a new block has just been added."

	| upcomingBlocks block |
	upcomingBlocks := world upcomingBlocks.

	block := upcomingBlocks first.
	(self subpartNamed: 'preview1Pane')
		drawBlock: block at: (((3 - block width) // 2) @ ((4 - block height) // 2));
		refresh;
		yourself.

	block := upcomingBlocks at: 2.
	(self subpartNamed: 'preview2Pane')
		drawBlock: block at: (((3 - block width) // 2) @ ((4 - block height) // 2));
		refresh;
		yourself.

	block := upcomingBlocks last.
	(self subpartNamed: 'preview3Pane')
		drawBlock: block at: (((3 - block width) // 2) @ ((4 - block height) // 2));
		refresh;
		yourself.

	^self
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> setupView [
	"Perform any required duties now that the receiver is open."

	(self subpartNamed: 'gameGrid') widget
		addEventHandler: KeyPressMask
		receiver: self
		selector: #keyPressed:clientData:callData:
		clientData: nil.

	^self
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> shiftBlockLeft [

	^world ifNotNil: [ :w | w shiftFallingBlockLeft ]
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> shiftBlockRight [

	^world ifNotNil: [ :w | w shiftFallingBlockRight ]
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> showGameEnded [

	TetrisEndOfGameView new
		world: world;
		openApplicationModalWidget;
		suspendExecutionUntilRemoved;
		yourself.

	(self subpartNamed: 'preview1Pane') clear.
	(self subpartNamed: 'preview2Pane') clear.
	(self subpartNamed: 'preview3Pane') clear.

	^self
]

{ #category : 'Actions',
  #vaVisibility : 'private' }
TetrisGameView >> startGame [

	( world notNil ) ifFalse: [
		world := TetrisWorld on: (self subpartNamed: 'gameGrid').
		(self subpartNamed: 'world') value: world.
	].

	isRunning := true.

	(self subpartNamed: 'gameGrid') setFocus.

	^world startGame
]
