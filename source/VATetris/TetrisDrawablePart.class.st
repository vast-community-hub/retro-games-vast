Class {
	#name : 'TetrisDrawablePart',
	#superclass : 'AbtPrimitiveView',
	#instVars : [
		'columnCount',
		'rowCount',
		'shouldShowGrid',
		'cells'
	],
	#category : 'VATetris'
}

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> _PRAGMA_IS_ [

	"%%PRAGMA DECLARE
	(name: IS_TetrisDrawablePart isPool: true isConstant: false)
	(pool: IS_TetrisDrawablePart declarations: (
		(name: IS_columnCount isConstant: false)
		(name: IS_shouldShowGrid isConstant: false)
		(name: IS_rowCount isConstant: false)
		(name: IS_instanceInterfaceSpec isConstant: false)
	))"
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> abtPrimFlushInterfaceSpecCache [

	IS_TetrisDrawablePart associationsDo: [: poolDictionaryAssoc | poolDictionaryAssoc value: nil].
	super abtPrimFlushInterfaceSpecCache
]

{ #category : 'Information' }
TetrisDrawablePart class >> cwWidgetClass [
	"Answer the appropriate widget class."

	^TetrisDrawableAreaWidget
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> IS_columnCount [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_TetrisDrawablePart::IS_columnCount notNil
		ifTrue: [IS_TetrisDrawablePart::IS_columnCount]
		ifFalse: [
		IS_TetrisDrawablePart::IS_columnCount := (AbtAttributeSpec new
		 attributeType: Integer;
		 setSelector: #columnCount:;
		 getSelector: #columnCount;
		 changeSymbol: #columnCount)]
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_TetrisDrawablePart::IS_instanceInterfaceSpec notNil
		ifTrue: [IS_TetrisDrawablePart::IS_instanceInterfaceSpec]
		ifFalse: [
		IS_TetrisDrawablePart::IS_instanceInterfaceSpec := AbtInterfaceSpec new
		featureNamed: #columnCount put: self IS_columnCount;
		featureNamed: #shouldShowGrid put: self IS_shouldShowGrid;
		featureNamed: #rowCount put: self IS_rowCount]
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> IS_rowCount [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_TetrisDrawablePart::IS_rowCount notNil
		ifTrue: [IS_TetrisDrawablePart::IS_rowCount]
		ifFalse: [
		IS_TetrisDrawablePart::IS_rowCount := (AbtAttributeSpec new
		 attributeType: Integer;
		 setSelector: #rowCount:;
		 getSelector: #rowCount;
		 changeSymbol: #rowCount)]
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
TetrisDrawablePart class >> IS_shouldShowGrid [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_TetrisDrawablePart::IS_shouldShowGrid notNil
		ifTrue: [IS_TetrisDrawablePart::IS_shouldShowGrid]
		ifFalse: [
		IS_TetrisDrawablePart::IS_shouldShowGrid := (AbtAttributeSpec new
		 attributeType: Boolean;
		 setSelector: #shouldShowGrid:;
		 getSelector: #shouldShowGrid;
		 changeSymbol: #shouldShowGrid)]
]

{ #category : 'API' }
TetrisDrawablePart >> checkViabilityOf: aTetrisBlock [
	"Check to see if aTetrisBlock can be placed on the receiver.
	  If any part of the block would be outside the grid, or conflict
	  with any other block, then it is not viable.
	  Answer a Boolean."

	"Check left and right boundaries."
	( (aTetrisBlock location x ) >= 0 ) ifFalse: [ ^false ].
	( (aTetrisBlock location x + aTetrisBlock width) <= self columnCount ) ifFalse: [ ^false ].

	"Check if we have reached the very bottom."
	( (aTetrisBlock location y + aTetrisBlock height) <= self rowCount ) ifFalse: [ ^false ].

	"Finally, we check to see if any part of aTetrisBlock overlaps the currently-occupied
	  cells of the stationary blocks."
	^(aTetrisBlock overlapsCellsIn: cells at: aTetrisBlock location) not
]

{ #category : 'API' }
TetrisDrawablePart >> clear [

	^self widget ifNotNil: [ :w | w clear ]
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> clearCells [

	1 to: self rowCount do: [ :row | cells at: row put: (Array new: self columnCount) ].

	^cells
]

{ #category : 'API' }
TetrisDrawablePart >> clearFullRows [
	"Go through the game grid, looking for any and all rows that are currently
	  completely full.  For any that are found, we erase that row by shifting down all rows
	  above it.
	  Answer the number of rows that were cleared."

	| clearedRowCount |
	clearedRowCount := 0.

	cells doWithIndex: [ :row :rowIndex |
		( row allSatisfy: [ :indicator | indicator notNil ] ) ifTrue: [
			self shiftCellsDownAtRow: rowIndex.
			clearedRowCount := clearedRowCount + 1.
		].
	].

	"If we have cleared any rows, we let our widget know that a full refresh is required."
	self widget fullRefreshRequired: (clearedRowCount > 0).

	^clearedRowCount
]

{ #category : 'Accessors' }
TetrisDrawablePart >> columnCount [
	"Return the value of columnCount."

	^columnCount
]

{ #category : 'Accessors' }
TetrisDrawablePart >> columnCount: anInteger [
	"Save the value of columnCount."

	columnCount := anInteger.
	self signalEvent: #columnCount
		 with: anInteger.
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> drawBlock: aTetrisBlock at: aPoint [

	self clear. 
	cells do: [ :row | row nilAllSlots ].

	aTetrisBlock markOccupiedCellsIn: cells at: aPoint.

	^aTetrisBlock
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> initialize [
	"Initialize the receiver."

	^self
		columnCount: 10;
		rowCount: 20;
		shouldShowGrid: true;
		yourself
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> initializeCellsArray [
	"Create a 2-dimensional Array, to track the occupied cells on the game grid."

	cells := Array new: self rowCount.
	self clearCells.

	^cells
]

{ #category : 'API' }
TetrisDrawablePart >> refresh [

	^self widget ifNotNil: [ :w | w refresh ]
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> registerCellsOf: aTetrisBlock [

	| gridLocation |
	gridLocation := aTetrisBlock location.

	"Ask the block to mark off the cells it is occupying in our cells Array,
	  starting at the block's grid location."
	aTetrisBlock markOccupiedCellsIn: cells at: gridLocation.

	^aTetrisBlock
]

{ #category : 'API' }
TetrisDrawablePart >> registerFallingBlock: aTetrisBlock [

	^self widget ifNotNil: [ :w | w registerFallingBlock: aTetrisBlock ]
]

{ #category : 'API' }
TetrisDrawablePart >> reset [

	^self
		clearCells;
		clear;
		refresh;
		yourself
]

{ #category : 'Accessors' }
TetrisDrawablePart >> rowCount [
	"Return the value of rowCount."

	^rowCount
]

{ #category : 'Accessors' }
TetrisDrawablePart >> rowCount: anInteger [
	"Save the value of rowCount."

	rowCount := anInteger.
	self signalEvent: #rowCount
		 with: anInteger.
]

{ #category : 'API' }
TetrisDrawablePart >> setFallingBlockAsStationary [
	"The fallingBlock has become stuck.  We need to now register that block as stationary,
	  so a new block can begin to fall."

	| stuckBlock |

	( self widget notNil ) ifFalse: [ ^nil ].

	stuckBlock := widget setFallingBlockAsStationary.
	self registerCellsOf: stuckBlock.

	^stuckBlock
]

{ #category : 'Internal',
  #vaVisibility : 'private' }
TetrisDrawablePart >> shiftCellsDownAtRow: anInteger [

	| targetRow sourceRow |
	targetRow := cells at: anInteger.

	( anInteger > 1 ) ifFalse: [ ^1 to: self columnCount do: [ :index | targetRow at: index put: nil ] ].

	sourceRow := cells at: (anInteger - 1).
	1 to: self columnCount do: [ :index | targetRow at: index put: (sourceRow at: index) ].

	^self shiftCellsDownAtRow: (anInteger - 1)
]

{ #category : 'Accessors' }
TetrisDrawablePart >> shouldShowGrid [
	"Return the value of shouldShowGrid."

	^shouldShowGrid
]

{ #category : 'Accessors' }
TetrisDrawablePart >> shouldShowGrid: aBoolean [
	"Save the value of shouldShowGrid."

	shouldShowGrid := aBoolean.
	self signalEvent: #shouldShowGrid
		 with: aBoolean.
]

{ #category : 'Creation' }
TetrisDrawablePart >> widgetCreationArgBlock [
	"Set up any window initialization."

	self initializeCellsArray.

	^[ :w |
		super widgetCreationArgBlock value: w.

		w
			columnCount: self columnCount;
			rowCount: self rowCount;
			shouldShowGrid: self shouldShowGrid;
			cellArray: cells;
			yourself
	]
]
